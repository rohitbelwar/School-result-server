// migrate.js

require('dotenv').config();
const mongoose = require('mongoose');
const fs = require('fs');

// ‡§Ü‡§™‡§ï‡•á server.js ‡§∏‡•á StudentResult ‡§ï‡§æ Schema ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç
const studentResultSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },
  fatherName: { type: String, trim: true },
  motherName: { type: String, trim: true },
  rollNumber: { type: String, required: true, trim: true },
  dob: { type: String, required: true },
  class: { type: String, required: true, trim: true },
  section: { type: String, required: true, trim: true },
  examTerm: { type: String, trim: true },
  fullMarks: { type: Number },
  subjects: [{
    name: { type: String, required: true },
    marks: { type: Number, required: true }
  }],
  total: { type: Number },
  percent: { type: Number },
  rank: { type: Number }
});

const StudentResult = mongoose.model('StudentResult', studentResultSchema);

const MONGODB_URI = process.env.MONGODB_URI;

async function migrateData() {
  try {
    // MongoDB ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ MongoDB ‡§∏‡•á ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§');

    // students.json ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡§¢‡§º‡•á‡§Ç
    const jsonData = fs.readFileSync('students.json', 'utf-8');
    const students = JSON.parse(jsonData);
    console.log(`JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ${students.length} ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§Æ‡§ø‡§≤‡•á‡•§`);

    let newStudentsAdded = 0;

    // ‡§π‡§∞ ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã MongoDB ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡•á‡§Ç
    for (const student of students) {
      // ‡§™‡§π‡§≤‡•á ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§ï‡§ø ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
      const existingStudent = await StudentResult.findOne({
        rollNumber: student.rollNumber,
        class: student.class,
        section: student.section
      });

      if (!existingStudent) {
        const newStudent = new StudentResult({
          name: student.name,
          fatherName: student.fatherName,
          motherName: student.motherName,
          rollNumber: student.rollNumber,
          dob: student.dob,
          class: student.class,
          section: student.section,
          // ‡§¨‡§æ‡§ï‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§°‡•ç‡§∏ ‡§Ö‡§≠‡•Ä ‡§ñ‡§æ‡§≤‡•Ä ‡§∞‡§π‡•á‡§Ç‡§ó‡•á, ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
          subjects: student.subjects || [],
          examTerm: student.examTerm || '',
          total: student.total || 0,
          percent: student.percent || 0
        });
        await newStudent.save();
        newStudentsAdded++;
        console.log(`‡§®‡§Ø‡§æ ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ: ${student.name} (‡§∞‡•ã‡§≤ ‡§®‡§Ç‡§¨‡§∞: ${student.rollNumber}, ‡§ï‡•ç‡§≤‡§æ‡§∏: ${student.class})`);
      } else {
        console.log(`‡§õ‡§æ‡§§‡•ç‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§õ‡•ã‡§°‡§º‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à: ${student.name}`);
      }
    }

    console.log(`\nüéâ ‡§Æ‡§æ‡§á‡§ó‡•ç‡§∞‡•á‡§∂‡§® ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü! ${newStudentsAdded} ‡§®‡§è ‡§õ‡§æ‡§§‡•ç‡§∞ MongoDB ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á ‡§ó‡§è‡•§`);

  } catch (error) {
    console.error('‚ùå ‡§Æ‡§æ‡§á‡§ó‡•ç‡§∞‡•á‡§∂‡§® ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à:', error);
  } finally {
    // ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç
    await mongoose.disconnect();
    console.log('MongoDB ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§');
  }
}

// ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ö‡§≤‡§æ‡§è‡§Å
migrateData();
